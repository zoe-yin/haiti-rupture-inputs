!EvalModel  # this indicates that we want to evaluate the parameters below before calculating the sxx, sxy, syy components
parameters: [Omega, sig_zz, b_xx, b_yy, b_zz, b_xy, b_yz, b_xz, bc_xx, bc_yy, bc_zz, bc_xy, bc_yz, bc_xz]
model: !Switch
  [Omega]: !LuaMap  # Depth dependent stress accumulation 
        returns: [Omega]
        function: |
         function f (x)
           zStressDecreaseStart = -25000.;
           zStressDecreaseStop = -28000.;
           zStressDecreaseWidth = zStressDecreaseStart - zStressDecreaseStop;
           if (x["z"] >= zStressDecreaseStart) then
              Omega = 1.0
           elseif (x["z"] >= zStressDecreaseStop) then
              a = 1.0-(x["z"]-zStressDecreaseStop)/zStressDecreaseWidth;
              Sx = (3.0*a*a-2.0*a*a*a);
              Omega = 1.0-0.99*Sx;
           else
              Omega = 0.01;
           end
           return {
             Omega = Omega
           }
           end
  [b_xx, b_yy, b_zz, b_xy, b_yz, b_xz]: !EvalModel
    parameters: [sig_zz,S, SH_max, s2ratio]
    model: !Switch  
      [sig_zz]: !Include Haiti_sig_zz.yaml
      [SH_max]: !Any 
          components:
            - !GroupFilter
              groups: [65]  # 66 is Thrust, 65 is RSF
              components: !ConstantMap
                map:
                    SH_max: 45.0 
            - !GroupFilter
              groups: [66, 67,68,69,70]  
              components: !ConstantMap
                map:
                    SH_max: 40.0 
      [S]: !Any
          components:
            - !GroupFilter
              groups: [65]  # 65=RSF, 66=Thrust
              components: !LuaMap
                returns: [S]
                function: |
                 function f (x)
                  R = 0.23
                  return {
                    S = (1.0/R-1.0)
                  }
                  end
            - !GroupFilter
              groups: [66, 67,68,69,70]  # Change the fault tags here !
              components: !LuaMap
                returns: [S]
                function: |
                 function f (x)
                  R = 0.4
                  return {
                    S = (1.0/R-1.0)
                  }
                  end     
      [s2ratio]: !Any
          components:     
            - !GroupFilter
              groups: [65]  # 65=RSF, 66=Thrust
              components: !ConstantMap
                map:
                    s2ratio: 0.0
            - !GroupFilter
              groups: [66, 67,68,69,70]  # 65=RSF, 66=Thrust
              components: !ConstantMap
                map:
                    s2ratio: 0.5   
    components: !AndersonianStress
      constants:
        mu_d: 0.16
        mu_s: 0.52
        cohesion:  0.0
        S_v: 3  # Andersonian stress regime (2 = strike slip, 3 = thrust)
  [sig_zz]: !Include Haiti_sig_zz.yaml
  [bc_xx, bc_yy, bc_zz,bc_xy, bc_yz, bc_xz]: !Include Haiti_stress_change.yaml  
components: !LuaMap
  returns: [s_xx, s_yy, s_zz, s_xy, s_yz, s_xz]
  function: |
     function f (x)
      return {
        s_xx = x["Omega"] * (x["b_xx"] - x["bc_xx"]) + (1.0-x["Omega"]) * x["sig_zz"],
        s_yy = x["Omega"] * (x["b_yy"] - x["bc_yy"]) + (1.0-x["Omega"]) * x["sig_zz"],
        s_zz = x["Omega"] * (x["b_zz"] - x["bc_zz"]) + (1.0-x["Omega"]) * x["sig_zz"],
        s_xy = x["Omega"] * (x["b_xy"] - x["bc_xy"]),
        s_yz = x["Omega"] * (x["b_yz"] - x["bc_yz"]),
        s_xz = x["Omega"] * (x["b_xz"] - x["bc_xz"])
      }
      end
